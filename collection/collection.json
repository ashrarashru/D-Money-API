{
	"info": {
		"_postman_id": "279352ab-e9f0-469f-b4f0-6d92751dc1b6",
		"name": "Assignment 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27163024"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Admin Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let token_rakhlam = jsonData.token\r",
											"pm.collectionVariables.set(\"Token\",token_rakhlam);\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Login successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@roadtocareer.net\",\r\n    \"password\" : \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unregistered admins log in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User not found\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"fake-admin@roadtocareer.net\",\r\n    \"password\" : \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Login (invalid mail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User not found\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admi@roadtocareer.net\",\r\n    \"password\" : \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Login (invalid password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Password incorrect\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@roadtocareer.net\",\r\n    \"password\" : \"1231\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create user",
					"item": [
						{
							"name": "Create a agent account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let userId = jsonData.user.id;\r",
											"let userEmail = jsonData.user.email;\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"userid\",userId);\r",
											"pm.collectionVariables.set(\"email\",userEmail.toLowerCase());\r",
											"\r",
											"\r",
											"pm.test(\"Agent created\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User created\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//let randomNumber = Math.floor(Math.random() * 9e10) + 1e10;\r",
											"//pm.environment.set(\"randomNumber\", randomNumber);\r",
											"\r",
											"const lodash=require('lodash');\r",
											"let randomId = lodash.random(100000, 999999);\r",
											"let prefix = \"01679\";\r",
											"let phoneNumber = prefix + randomId;\r",
											"console.log(phoneNumber)\r",
											"\r",
											"pm.collectionVariables.set(\"phoneNumber\", phoneNumber)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"ashrar-agent-{{$randomFirstName}}\",\r\n    \"email\" : \"{{$randomEmail}}\",\r\n    \"password\" : \"1234\",\r\n    \"phone_number\" : \"{{phoneNumber}}\",\r\n    \"nid\" : \"2236987454\",\r\n    \"role\" : \"Agent\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a first customer account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let userId = jsonData.user.id;\r",
											"let userEmail = jsonData.user.email;\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"userid\",userId);\r",
											"pm.collectionVariables.set(\"email\",userEmail.toLowerCase());\r",
											"\r",
											"\r",
											"pm.test(\"Agent created\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User created\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash=require('lodash');\r",
											"let randomId = lodash.random(100000, 999999);\r",
											"let prefix = \"01679\";\r",
											"let phoneNumber = prefix + randomId;\r",
											"console.log(phoneNumber)\r",
											"\r",
											"pm.collectionVariables.set(\"phoneNumber\", phoneNumber)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"ashrar-customr1-{{$randomFirstName}}\",\r\n    \"email\" : \"{{$randomEmail}}\",\r\n    \"password\" : \"1234\",\r\n    \"phone_number\" : \"{{phoneNumber}}\",\r\n    \"nid\" : \"2236987454\",\r\n    \"role\" : \"Customer\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second customer account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let userId = jsonData.user.id;\r",
											"let userEmail = jsonData.user.email;\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"userid\",userId);\r",
											"pm.collectionVariables.set(\"email\",userEmail.toLowerCase());\r",
											"\r",
											"\r",
											"pm.test(\"Agent created\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User created\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash=require('lodash');\r",
											"let randomId = lodash.random(100000, 999999);\r",
											"let prefix = \"01679\";\r",
											"let phoneNumber = prefix + randomId;\r",
											"console.log(phoneNumber)\r",
											"\r",
											"pm.collectionVariables.set(\"phoneNumber\", phoneNumber)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"ashrar-customr2-{{$randomFirstName}}\",\r\n    \"email\" : \"{{$randomEmail}}\",\r\n    \"password\" : \"1234\",\r\n    \"phone_number\" : \"{{phoneNumber}}\",\r\n    \"nid\" : \"2236987454\",\r\n    \"role\" : \"Customer\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a merchant account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let userId = jsonData.user.id;\r",
											"let userEmail = jsonData.user.email;\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"userid\",userId);\r",
											"pm.collectionVariables.set(\"email\",userEmail.toLowerCase());\r",
											"\r",
											"\r",
											"pm.test(\"Agent created\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User created\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash=require('lodash');\r",
											"let randomId = lodash.random(100000, 999999);\r",
											"let prefix = \"01679\";\r",
											"let phoneNumber = prefix + randomId;\r",
											"console.log(phoneNumber)\r",
											"\r",
											"pm.collectionVariables.set(\"phoneNumber\", phoneNumber)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"ashrar-customr1-{{$randomFirstName}}\",\r\n    \"email\" : \"{{$randomEmail}}\",\r\n    \"password\" : \"1234\",\r\n    \"phone_number\" : \"{{phoneNumber}}\",\r\n    \"nid\" : \"2236987454\",\r\n    \"role\" : \"Merchant\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative case",
					"item": [
						{
							"name": "Admin can't create an invalid role user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check role created or not\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Invalid role: Student. This role does not exist in the Role table.\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "bearer {{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"ashrar-invalid\",\r\n    \"email\" : \"ashrar_invalid@gmail.com\",\r\n    \"password\" : \"1234\",\r\n    \"phone_number\" : \"01679112361\",\r\n    \"nid\" : \"16984521\",\r\n    \"role\" : \"Student\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Phone number should be 11 digits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check role created or not\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"length must be at least 11 characters long\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "bearer {{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"ashrar-invalid\",\r\n    \"email\" : \"ashrar_invalid@gmail.com\",\r\n    \"password\" : \"1234\",\r\n    \"phone_number\" : \"0167911236\",\r\n    \"nid\" : \"16984521\",\r\n    \"role\" : \"Agent\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Agent",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Agent Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let token_rakhlam = jsonData.token\r",
											"pm.collectionVariables.set(\"Agent-Token\",token_rakhlam);\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Login successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"osbaldo.medhurst@hotmail.com\",\r\n    \"password\" : \"1234\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "System login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let token_rakhlam = jsonData.token\r",
											"pm.collectionVariables.set(\"System-Token\",token_rakhlam);\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Login successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"system@roadtocareer.net\",\r\n    \"password\" : \"1234\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agent Login (invalid mail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User not found\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eerald52@gmail.com\",\r\n    \"password\" : \"1234\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agent Login (invalid password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Password incorrect\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"emerald52@gmail.com\",\r\n    \"password\" : \"1254\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deposit",
					"item": [
						{
							"name": "Deposit Money (From System)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Deposit money to agent\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Deposit successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{System-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 500\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit to customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Deposit money to customer 1\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Deposit successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Agent-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agent-account}}\",\r\n  \"to_account\": \"{{customer1-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can't deposit to Merchant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Deposit money to merchant\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Agent can't deposit to merchant\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Agent-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agent-account}}\",\r\n  \"to_account\": \"{{merchant-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit Money (less than 10)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Deposit money to agent\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Minimum deposit amount is 10 tk and maximum deposit amount is 10000 tk\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{System-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit Money (more than 10,000)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Deposit money to agent\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Minimum deposit amount is 10 tk and maximum deposit amount is 10000 tk\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{System-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 15000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Balance",
					"item": [
						{
							"name": "Check balance (Agent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check Merchant Balance\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User balance\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Agent-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{agent-account}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{agent-account}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check transaction statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Transaction list\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Agent-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/statement/{{customer1-account}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"statement",
										"{{customer1-account}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Send money",
					"item": [
						{
							"name": "Can't send money to customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Send money to merchant\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"From/To account should not be an agent account\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Agent-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agent-account}}\",\r\n  \"to_account\": \"{{customer1-account}}\",\r\n  \"amount\": 500\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can't send money to merchant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Send money to merchant\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"From/To account should not be an agent account\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Agent-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agent-account}}\",\r\n  \"to_account\": \"{{merchant-account}}\",\r\n  \"amount\": 500\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative case",
					"item": [
						{
							"name": "Agent insufficient balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Insufficient balance\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Insufficient balance\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Agent-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agent-account}}\",\r\n  \"to_account\": \"{{customer1-account}}\",\r\n  \"amount\": 6000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agent can't create account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Create user\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Only admin can create new users\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Agent-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"ashrar-ag\",\r\n    \"email\" : \"ashrar_mer@gmail.com\",\r\n    \"password\" : \"1234\",\r\n    \"phone_number\" : \"01679903571\",\r\n    \"nid\" : \"66910531\",\r\n    \"role\" : \"Merchant\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "First Customer",
			"item": [
				{
					"name": "Log in",
					"item": [
						{
							"name": "First customer login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let token_rakhlam = jsonData.token\r",
											"pm.collectionVariables.set(\"Customer1-Token\",token_rakhlam);\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Login successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"clement29@yahoo.com\",\r\n    \"password\" : \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "First customer login (wrong mail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let token_rakhlam = jsonData.token\r",
											"\r",
											"pm.test(\"Check with wrong mail\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User not found\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"clement2@yahoo.com\",\r\n    \"password\" : \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "First customer login (wrong password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let token_rakhlam = jsonData.token\r",
											"\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Password incorrect\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"clement29@yahoo.com\",\r\n    \"password\" : \"1235\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Send money",
					"item": [
						{
							"name": "Send money (Customer 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Send money to customer 2\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Send money successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1-account}}\",\r\n  \"to_account\": \"{{customer2-account}}\",\r\n  \"amount\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can't send money (Agent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Send money to agent\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"From/To account should not be an agent account\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1-account}}\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can't send money (Merchant)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Send money to merchant\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Customer should not send money to a merchant account.\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1-account}}\",\r\n  \"to_account\": \"{{merchant-account}}\",\r\n  \"amount\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send money (less 10)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from agent\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Minimum amount is 10 tk\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1-account}}\",\r\n  \"to_account\": \"{{customer2-account}}\",\r\n  \"amount\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send money (more 10,000)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from agent\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Maximum amount is 10,000 tk\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1-account}}\",\r\n  \"to_account\": \"{{customer2-account}}\",\r\n  \"amount\": 15000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Withdraw",
					"item": [
						{
							"name": "Withdraw (Agent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from agent\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Withdraw successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1-account}}\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 20\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw (less 10)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from agent\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Minimum withdraw amount is 10 tk\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1-account}}\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw (more 10,000)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from agent\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Maximum amount is 10,000 tk\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1-account}}\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 15000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can't Withdraw (Customer)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Customer cannot withdraw money from another customer\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1-account}}\",\r\n  \"to_account\": \"{{customer2-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can't Withdraw (Merchant)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Customer cannot withdraw money from merchant\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1-account}}\",\r\n  \"to_account\": \"{{merchant-account}}\",\r\n  \"amount\": 450\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Balance & statement",
					"item": [
						{
							"name": "Check balance (Customer-1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check Merchant Balance\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User balance\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{customer1-account}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{customer1-account}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check transaction statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Transaction list\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/statement/{{customer1-account}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"statement",
										"{{customer1-account}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Second Customer",
			"item": [
				{
					"name": "Log in",
					"item": [
						{
							"name": "Second customer login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let token_rakhlam = jsonData.token\r",
											"pm.collectionVariables.set(\"Customer2-Token\",token_rakhlam);\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Login successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"otto_hettinger82@hotmail.com\",\r\n    \"password\" : \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Second customer (wrong mail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User not found\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"ottohettinger82@hotmail.com\",\r\n    \"password\" : \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Second customer (wrong password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Password incorrect\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"otto_hettinger82@hotmail.com\",\r\n    \"password\" : \"1235\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check balance and transaction",
					"item": [
						{
							"name": "Check balance (Customer-2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check Merchant Balance\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User balance\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer2-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{customer2-account}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{customer2-account}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check transaction statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Transaction list\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/statement/{{customer2-account}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"statement",
										"{{customer2-account}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "Can't payment (Agent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"From A/C should be customer or agent and To A/C should be merchant type\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer2-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2-account}}\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can't payment (Customer)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"From A/C should be customer or agent and To A/C should be merchant type\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer2-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2-account}}\",\r\n  \"to_account\": \"{{customer1-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pyament (less 10)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from agent\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Minimum Payment amount is 10 tk\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer2-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2-account}}\",\r\n  \"to_account\": \"{{merchant-account}}\",\r\n  \"amount\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pyament (more 10,000)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from agent\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Maximum amount is 10 tk\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer2-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2-account}}\",\r\n  \"to_account\": \"{{merchant-account}}\",\r\n  \"amount\": 15000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment (merchant)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Payment successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer2-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2-account}}\",\r\n  \"to_account\": \"{{merchant-account}}\",\r\n  \"amount\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deposit",
					"item": [
						{
							"name": "Customer can't deposit to Merchant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Deposit money to merchant\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Only Agent can deposit money\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer2-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2-account}}\",\r\n  \"to_account\": \"{{merchant-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer can't deposit to agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Deposit money to merchant\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Only Agent can deposit money\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer2-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2-account}}\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer can't deposit to customer 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Deposit money to merchant\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Only Agent can deposit money\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer2-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2-account}}\",\r\n  \"to_account\": \"{{customer1-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Can't create user",
					"item": [
						{
							"name": "Customer can't create account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Create user\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Only admin can create new users\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Customer1-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"ashrar-cus\",\r\n    \"email\" : \"ashrar_cus@gmail.com\",\r\n    \"password\" : \"1234\",\r\n    \"phone_number\" : \"01679903571\",\r\n    \"nid\" : \"66910531\",\r\n    \"role\" : \"Customer\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Merchant",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Merchant login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let token_rakhlam = jsonData.token\r",
											"pm.collectionVariables.set(\"Merchant-Token\",token_rakhlam);\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Login successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"beverly.feest53@hotmail.com\",\r\n    \"password\" : \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Merchant Login (invalid mail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User not found\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"beverlyfeest53@hotmail.com\",\r\n    \"password\" : \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Merchant Login (invalid password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check if login is successful\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Password incorrect\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"beverly.feest53@hotmail.com\",\r\n    \"password\" : \"1235\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check balance & transaction",
					"item": [
						{
							"name": "Check balance (Merchant)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check Merchant Balance\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User balance\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Merchant-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{merchant-account}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{merchant-account}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check transaction statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Transaction list\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Merchant-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/statement/{{customer2-account}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"statement",
										"{{customer2-account}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "Can't payment (Customer)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"From A/C should be customer or agent and To A/C should be merchant type\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Merchant-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{merchant-account}}\",\r\n  \"to_account\": \"{{customer2-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can't payment (Agent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Withdraw money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"From A/C should be customer or agent and To A/C should be merchant type\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Merchant-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{merchant-account}}\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deposit",
					"item": [
						{
							"name": "Can't deposit to customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Deposit money to merchant\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Only Agent can deposit money\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Merchant-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{merchant-account}}\",\r\n  \"to_account\": \"{{customer2-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can't deposit to agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Deposit money to merchant\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Only Agent can deposit money\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Merchant-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{merchant-account}}\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Send money",
					"item": [
						{
							"name": "Can't send money (Customer)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Send money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Only customer can send money\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Merchant-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{merchant-account}}\",\r\n  \"to_account\": \"{{customer2-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can't send money (Agent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Send money from customer\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Only customer can send money\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Merchant-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{merchant-account}}\",\r\n  \"to_account\": \"{{agent-account}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Can't create user",
					"item": [
						{
							"name": "Merchant can't create account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Create user\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"Only admin can create new users\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{Merchant-Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"ashrar-mer\",\r\n    \"email\" : \"ashrar_mer@gmail.com\",\r\n    \"password\" : \"1234\",\r\n    \"phone_number\" : \"01679903571\",\r\n    \"nid\" : \"66910531\",\r\n    \"role\" : \"Merchant\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://dmoney.roadtocareer.net",
			"type": "string"
		},
		{
			"key": "Partner Key",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "Token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGlmaWVyIjoiYWRtaW5Acm9hZHRvY2FyZWVyLm5ldCIsInJvbGUiOiJBZG1pbiIsImlhdCI6MTcyNTcxNjE0NiwiZXhwIjoxNzI1NzE5NzQ2fQ.-KJE4yxSzgaYFOHCS1wFxfV842SraAKoLONLT2YHMrc"
		},
		{
			"key": "Agent-Token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGlmaWVyIjoib3NiYWxkby5tZWRodXJzdEBob3RtYWlsLmNvbSIsInJvbGUiOiJBZ2VudCIsImlhdCI6MTcyNTcxNjE1MSwiZXhwIjoxNzI1NzE5NzUxfQ.doaUy0LnbE4MRS_WeTTSsqk9HEURdRrcbeMFPy8lOoQ"
		},
		{
			"key": "Merchant-Token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGlmaWVyIjoiYmV2ZXJseS5mZWVzdDUzQGhvdG1haWwuY29tIiwicm9sZSI6Ik1lcmNoYW50IiwiaWF0IjoxNzI1NzE2MTc2LCJleHAiOjE3MjU3MTk3NzZ9.owLJmUY6jb1tmhfKsbzlkkwUJEnINqGr7gSpfO0ikxo"
		},
		{
			"key": "Customer1-Token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGlmaWVyIjoiY2xlbWVudDI5QHlhaG9vLmNvbSIsInJvbGUiOiJDdXN0b21lciIsImlhdCI6MTcyNTcxNjE2MiwiZXhwIjoxNzI1NzE5NzYyfQ.7JRF5mkOz4WJsXRQ5rPdiP2ux4n3FPOTge1Dh0pfbSo"
		},
		{
			"key": "Customer2-Token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGlmaWVyIjoib3R0b19oZXR0aW5nZXI4MkBob3RtYWlsLmNvbSIsInJvbGUiOiJDdXN0b21lciIsImlhdCI6MTcyNTcxNjE3MiwiZXhwIjoxNzI1NzE5NzcyfQ.xvHqZLiS0flV-edTjSDqn6duLRiH9MPRrfSdRpHjJxk"
		},
		{
			"key": "phoneNumber",
			"value": "01679384337"
		},
		{
			"key": "userid",
			"value": 12137
		},
		{
			"key": "email",
			"value": "salvatore.marks84@yahoo.com"
		},
		{
			"key": "merchant-account",
			"value": "01679694507",
			"type": "string"
		},
		{
			"key": "agent-account",
			"value": "01679723035",
			"type": "string"
		},
		{
			"key": "customer1-account",
			"value": "01679983873",
			"type": "string"
		},
		{
			"key": "customer2-account",
			"value": "01679402537",
			"type": "string"
		},
		{
			"key": "System-Token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGlmaWVyIjoic3lzdGVtQHJvYWR0b2NhcmVlci5uZXQiLCJyb2xlIjoiQWdlbnQiLCJpYXQiOjE3MjU3MTYxNTYsImV4cCI6MTcyNTcxOTc1Nn0.8Nj_Ppi6ajY34HHep-d9OdhOUCRDwrsM0Jp2YKvzQJM"
		}
	]
}